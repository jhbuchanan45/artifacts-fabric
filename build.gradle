plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id "com.github.fudge.forgedflowerloom" version "2.0.0"
}

repositories {
    mavenLocal()
    maven { url = "https://maven.terraformersmc.com" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.florens.be"
        content {
            includeGroup "be.florens"
        }
    }
    maven { // Leave this as lowest priority
        url = "https://jitpack.io"
        content {
            includeGroupByRegex "com.github.*"
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Dependencies
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("dev.emi:trinkets:${project.trinkets_version}") {
        transitive = false
    }
    modImplementation include("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cca_version}")
    modImplementation include("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cca_version}")
    modImplementation include("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cca_version}")
    modImplementation include("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:${project.cca_version}")
    modImplementation include("be.florens:expandability-fabric:${project.expandability_version}")
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
    modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        transitive = false
    }
    // TODO: api for extra entity attributes: gravity, swimming speed, step height, reach/range
    modImplementation include("com.github.emilyploszaj:step-height-entity-attribute:${project.step_height_attr_version}") {
        transitive = false
    }
//     modImplementation "me.shedaniel:rei:${project.rei_version}"
    modImplementation "curse.maven:rei-310111:3381485"

    // Compat
    modCompileOnly("com.github.apace100:origins-fabric:v${project.origins_version}") {
        transitive = false
    }
    modCompileOnly("com.github.apace100:apoli:v${project.apoli_version}") {
        transitive = false
    }
    modCompileOnly("com.github.apace100:calio:v${project.calio_version}") {
        transitive = false
    }
//    modCompileOnly("com.github.williambl:haema:${project.haema_version}") {
    modCompileOnly("curse.maven:haema-391257:3380616") {
        transitive = false
    }

    include modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

    // Dev runtime
    testmodImplementation sourceSets.main.output
    modRuntime "be.florens:autoload-fabric:${project.autoload_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

minecraft {
    accessWidener =  file("src/main/resources/artifacts.accesswidener")
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}
